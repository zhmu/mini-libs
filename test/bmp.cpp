#include "gtest/gtest.h"
#include "mini-bmp.h"

#include <fstream>

namespace
{
    template<typename Data, typename Expected>
    void VerifyContentsEqualsExpected(const Data& data, const Expected& expected)
    {
        ASSERT_EQ(expected.size(), data.size());
        auto dataIterator = data.begin();
        auto expectedIterator = expected.begin();
        for(/* nothing */; dataIterator != data.end(); ++dataIterator, ++expectedIterator) {
            EXPECT_EQ(*dataIterator, *expectedIterator);
        }
    }

}

TEST(BMP, Write24)
{
    constexpr std::size_t width = 5;
    constexpr std::size_t height = 7;
    constexpr std::size_t bpp = 24; // *bits* per pixel
    constexpr std::uint8_t R = 255;
    constexpr std::uint8_t G = 255;
    constexpr std::uint8_t B = 255;
    constexpr std::uint8_t _ = 0;
    constexpr std::array<uint8_t, width * height * (bpp / 8)> pixels{
        R, _, _, R, _, _, R, _, _, R, _, _, R, _, _,
        R, _, _, _, _, _, _, _, _, _, G, _, R, _, _,
        R, _, _, _, G, _, _, _, _, _, _, _, R, _, _,
        R, _, _, _, G, _, _, _, _, _, _, _, R, _, _,
        R, _, _, _, G, _, _, _, _, _, G, _, R, _, _,
        R, _, _, _, _, B, _, _, _, _, _, _, R, _, _,
        R, _, _, R, _, _, R, _, _, R, _, _, R, _, _
    };

    constexpr std::array<uint8_t, 166> expected{
        0x42, 0x4d, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00,
        0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00,
        0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00,
        0x00, 0xff, 0x00, 0x00, 0xff, 0x00
    };

    mini_bmp::MemoryStreamer ms;
    ASSERT_EQ(mini_bmp::Result::OK, mini_bmp::Write(ms, pixels.data(), height, width, bpp));
    VerifyContentsEqualsExpected(ms.buffer, expected);
}

TEST(BMP, Write32)
{
    constexpr std::size_t width = 5;
    constexpr std::size_t height = 7;
    constexpr std::size_t bpp = 32; // *bits* per pixel
    constexpr std::uint8_t A = 255; // alpha
    constexpr std::uint8_t R = 255;
    constexpr std::uint8_t G = 255;
    constexpr std::uint8_t B = 255;
    constexpr std::uint8_t _ = 0;
    constexpr std::array<uint8_t, width * height * (bpp / 8)> pixels{
        R, _, _, A, R, _, _, A, R, _, _, A, R, _, _, A, R, _, _, A,
        R, _, _, A, _, _, _, A, _, _, _, A, _, G, _, A, R, _, _, A,
        R, _, _, A, _, _, B, A, _, _, _, A, _, _, _, A, R, _, _, A,
        R, _, _, A, _, _, B, A, _, _, _, A, _, _, _, A, R, _, _, A,
        R, _, _, A, _, _, B, A, _, _, _, A, _, G, _, A, R, _, _, A,
        R, _, _, A, _, _, B, A, _, _, _, A, _, _, _, A, R, _, _, A,
        R, _, _, A, R, _, _, A, R, _, _, A, R, _, _, A, R, _, _, A
    };

    constexpr std::array<uint8_t, 194> expected{
        0x42, 0x4d, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00,
        0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
        0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,
        0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
        0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00,
        0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
        0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00,
        0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
        0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
        0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
        0xff, 0xff
    };

    mini_bmp::MemoryStreamer ms;
    ASSERT_EQ(mini_bmp::Result::OK, mini_bmp::Write(ms, pixels.data(), height, width, bpp));
    VerifyContentsEqualsExpected(ms.buffer, expected);
}
