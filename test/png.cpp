#include <array>
#include <optional>
#include "mini-png.h"
//#include "mini-bmp.h"
#include "gtest/gtest.h"

#include <fstream>

namespace
{
    template<typename Data, typename Expected>
    void VerifyContentsEqualsExpected(const Data& data, const Expected& expected)
    {
        ASSERT_EQ(expected.size(), data.size());
        auto dataIterator = data.begin();
        auto expectedIterator = expected.begin();
        for(/* nothing */; dataIterator != data.end(); ++dataIterator, ++expectedIterator) {
            EXPECT_EQ(*dataIterator, *expectedIterator);
        }
    }

}

TEST(ChunkType, PropertyBits)
{
    using namespace mini_png::chunk_types;
    constexpr auto type_tIME = FromIdentifier({ 't', 'I', 'M', 'E' });
    EXPECT_TRUE(type_tIME.IsAncillary());
    EXPECT_FALSE(type_IHDR.IsAncillary());
    EXPECT_FALSE(type_IEND.IsAncillary());
    constexpr auto type_bLOb = FromIdentifier({ 'b', 'L', 'O', 'b' });
    EXPECT_TRUE(type_bLOb.IsSafeToCopy());
    EXPECT_FALSE(type_bLOb.IsReserved());
    EXPECT_FALSE(type_bLOb.IsPrivate());
    EXPECT_TRUE(type_bLOb.IsAncillary());
}

TEST(png, png)
{
    constexpr std::array<uint8_t, 258> image{
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
        0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x11, 0x08, 0x02, 0x00, 0x00, 0x00, 0x89, 0x9d, 0xb1,
        0xcb, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x2e, 0x23, 0x00, 0x00, 0x2e,
        0x23, 0x01, 0x78, 0xa5, 0x3f, 0x76, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 0x45, 0x07, 0xe3,
        0x08, 0x13, 0x0e, 0x39, 0x1a, 0xd7, 0xa0, 0x29, 0xf6, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58,
        0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
        0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x47, 0x49, 0x4d, 0x50, 0x57, 0x81, 0x0e, 0x17, 0x00, 0x00,
        0x00, 0x7c, 0x49, 0x44, 0x41, 0x54, 0x28, 0xcf, 0xad, 0x92, 0xd1, 0x0d, 0xc3, 0x20, 0x0c, 0x44,
        0xdf, 0x45, 0x1d, 0xc6, 0xb3, 0xb4, 0xfb, 0x2b, 0x6c, 0x73, 0xf9, 0x30, 0x49, 0x00, 0x89, 0x86,
        0x4a, 0xb5, 0x90, 0x40, 0xc7, 0xb3, 0x8d, 0x6d, 0x64, 0x96, 0x6c, 0x03, 0xb0, 0xeb, 0x62, 0xc7,
        0xfe, 0xb8, 0x51, 0xaa, 0x9e, 0xdc, 0x6a, 0xbc, 0xef, 0xa6, 0x02, 0xbc, 0xae, 0xd3, 0x14, 0x72,
        0xa0, 0xe4, 0x1c, 0xad, 0xeb, 0x08, 0x8d, 0x79, 0xe7, 0xd0, 0x99, 0xb7, 0x55, 0x55, 0xf0, 0x08,
        0x01, 0x32, 0x04, 0x0f, 0x4d, 0x2c, 0x08, 0x83, 0xd3, 0xd8, 0x73, 0x7f, 0xfb, 0x54, 0x2e, 0xfd,
        0xae, 0xb7, 0xcf, 0xd2, 0xbd, 0xd5, 0x81, 0xea, 0x3c, 0x62, 0x2c, 0x22, 0xdd, 0x1a, 0xe7, 0xad,
        0xbb, 0x50, 0x99, 0xf5, 0xf2, 0x8f, 0x73, 0xfb, 0x89, 0xd3, 0xe2, 0xff, 0x3b, 0x00, 0x80, 0x79,
        0x53, 0x99, 0x55, 0x54, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
        0x60, 0x82
    };

    std::vector<uint8_t> pixels;
    int line = 0;
    std::size_t bytesPerLine;
    int height, width, bpp;

    mini_png::ByteStreamer bs(image);
    auto result = mini_png::Parse(bs, [&](const mini_png::ImageHeader& ihdr) {
        //printf("size %d x %d\n", ihdr.width, ihdr.height);
        bytesPerLine = ihdr.width * ihdr.GetBytesPerPixel();
        //printf("bytesPerLine %d\n", bytesPerLine);
        pixels.resize(ihdr.height * bytesPerLine);

        width = ihdr.width; height = ihdr.height; bpp = ihdr.GetBytesPerPixel();
    }, [&](auto& scanline) {
        std::copy(scanline.begin(), scanline.end(), pixels.begin() + line * bytesPerLine);
        line++;
    });
    EXPECT_EQ(mini_png::Result::OK, result);
    std::ofstream ofs("out.raw");
    ofs.write(reinterpret_cast<const char*>(pixels.data()), height * width * bpp);

    constexpr std::array<uint8_t, 663> expected{
        0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff,
        0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00,
        0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0x4a, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff,
        0x4a, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0x4a, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff,
        0x00, 0xd7, 0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0x4a, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff,
        0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0x00, 0xd7, 0xff, 0xff, 0xff, 0x4a, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0x4a, 0xff, 0x00, 0xff,
        0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x00, 0xd7, 0x4a, 0xff, 0x00, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x27, 0x00, 0xff, 0x27, 0x00,
        0xff, 0x27, 0x00, 0xff, 0x27, 0x00, 0xff, 0x27, 0x00, 0xff, 0x27, 0x00, 0xff, 0x27, 0x00, 0xff,
        0x27, 0x00, 0xff, 0x27, 0x00, 0xff, 0x27, 0x00, 0xff, 0x27, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff,
        0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x4a, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x00, 0xd7, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff,
        0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4a, 0xff, 0x00, 0xff, 0x00, 0xd7, 0xff, 0x00,
        0xd7, 0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00,
        0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4a,
        0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff,
        0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7,
        0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0x4a, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff,
        0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0x4a, 0xff, 0x00,
        0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff,
        0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0x00,
        0xd7, 0xff, 0x00, 0xd7, 0x4a, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff,
        0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0xff, 0x00, 0xd7, 0x4a, 0xff, 0x00, 0xff, 0xff,
        0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
        0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff,
        0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00,
        0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00
    };
    VerifyContentsEqualsExpected(pixels, expected);

#if 0
    mini_bmp::MemoryStreamer ms;
    mini_bmp::Write(ms, pixels.data(), height, width, bpp * 8);
    std::ofstream ofs("decoded_png.bmp");
    ofs.write(reinterpret_cast<const char*>(ms.data()), ms.size());
#endif
}
